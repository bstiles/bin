#!/usr/bin/env bash
[ $BASH_VERSINFO -gt 3 ] || { echo "Bash 4+ is required."; exit 1; }

set -o errexit -o pipefail -o nounset
shopt -s extglob nullglob
unset CDPATH

declare -ir ERR_GENERAL=1
declare -ir ERR_BAD_CMD_LINE=113
declare -ir ERR_PRECONDITION_VIOLATED=112
declare -ir ERR_MAX_LINK_DEPTH_EXCEEDED=111
declare -ir ERR_CMD_NOT_FOUND=110
declare -ir ERR_NON_EXISTENT_DIR=109
# Use 64-100 for other exit codes.

declare -r here=$(cd -- "${BASH_SOURCE[0]%/*}" && pwd)

declare -A roots;                            declare -a order;
roots[bin]=~/bin                             order+=(bin)
roots[config]=~/Config                       order+=(config)
roots[mathematica]=~/Library/Mathematica     order+=(mathematica)
roots[contracting]=~/Contracting             order+=(contracting)
roots[ipt]=~/IPT                             order+=(ipt)
roots[org]=~/org                             order+=(org)
roots[st]=~/Stiles\ Technologies             order+=(st)
roots[monkey]=~/Development/Projects/Monkey  order+=(monkey)
roots[monkey-config]=~/.monkey               order+=(monkey-config)
roots[dev]=~/Development                     order+=(dev)
roots[ccm]=~/CCM                             order+=(ccm)
roots[sk]=~/SmartKable                       order+=(sk)

declare maxdepth=${maxdepth:-5}

display_help() {
cat <<EOF
usage: ${0##*/} [opts] [key [key..]]

-r|--show-remote Show remote repository (only).
-u|--upstream    Show upstream status.
-h|--help        Displays usage information.

Any other -* options are passed to \`mgitstatus\`.

If keys is the last argument, only show status from the directory named
KEY.

Otherwise, show local Git status for repositories under:

$(for x in "${order[@]}"; do printf '%-27s [%s]\n' "${roots[$x]}" $x ; done)

Does not show upstream status by default. Skips projects under \`_ext\`,
\`_explore\`, and \`Historical\`.
EOF
}
require() {
    eval [[ \$\{${1:?require was called without arguments!}-\} ]] \
         '||' abort \$ERR_BAD_CMD_LINE \$\{2-\$1 is required!\} \$\{*:3\}
}
abort() {
    local -i err_code=${1:?abort called without err_code}
    (( err_code == ERR_BAD_CMD_LINE )) && {
        display_help; echo; echo "-- ABORTED:"
    }
    shift; (( $# > 0 )) && echo "$*" >&2
    exit $err_code
}

contains_element () {
  local e match=$1
  shift
  for x in "$@"; do
      [[ $x == $match ]] && return 0
  done
  return 1
}

main() {
    local upstream=--no-upstream
    local -a args
    local -a keys
    local dir no_remote remote root roots_key show_remote status

    while (( $# > 0 )); do
        case $1 in
            -r|--show-remote)
                show_remote=true
                ;;
            -u|--upstream)
                upstream=
                ;;
            -*)
                args+=($1)
                ;;
            *)
                keys+=($1)
                ;;
        esac
        shift
    done

    for x in ${keys[@]-}; do
        [[ ! ${roots[$x]-} ]] && abort $ERR_NON_EXISTENT_DIR "Unknown key: $x"
    done

    for roots_key in "${order[@]}"; do
        [[ ${keys[@]-} ]] && ! contains_element $roots_key "${keys[@]}" && continue
        root=${roots[$roots_key]}
        if [[ -d $root ]]; then
            echo $(basename "$root")
            echo '----------------------------------------------------------------------'
        else
            echo "$(basename "$root") does not exist"
            echo '- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
            continue
        fi
        while read -r x; do
            [[ $x =~ (_ext|_explore|Historical) ]] && continue
            dir=$(dirname "$x")
            cd "$dir"
            if [[ ${show_remote-} ]]; then
                no_remote=true
                while read -r remote; do
                    no_remote=
                    printf '%23s: %s\n' "$(basename "$dir")" "$remote"
                done < <(git remote -v)
                if [[ ${no_remote-} ]]; then
                    printf '%23s: -\n' "$(basename "$dir")"
                fi
            else
                status=$("$here/mgitstatus" -c $upstream ${args[@]} . 0)
                if [[ ${status-} ]]; then
                    printf '%23s %s\n' "$(basename "$dir")" "$status"
                fi
            fi
        done < <(find "$root" -maxdepth $maxdepth -type d -name .git)
    done
}

# Handle help
[[ ${1-} == @(--help|-h) ]] && { display_help; exit 0; }
main "$@"
