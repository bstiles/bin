#!/usr/bin/env clj-ng
#_(comment (defenv clj-env
             (:dependencies [[mcp-core "1.0.0-SNAPSHOT"]])))

(require '[clojure.java.io :as io])

(def data-file (io/file (if *command-line-args*
                          (first *command-line-args*)
                          "NO_FILE_SPECIFIED")))
(def entry-pattern #"\"([^\"]*)\",\"([^\"]*)\",\"([^\"]*)\",[^,]*,[^,]*,\"([^\"]*)\",\"[^\"]*\",\"\"")

;; (defn parse-date
;;   [text]
;;   (.parse (java.text.SimpleDateFormat. "MMM dd, yyyy") text))

(defn -run
  []
  (if-not (.exists data-file)
    (println "File does not exist:" data-file)
    (let [[dates time-table]
          (reduce (fn [[dates time-table] delta]
                    (let [date (nth delta 1)
                          category (nth delta 3)
                          hours (Double/parseDouble (nth delta 4))]
                      [(conj dates date)
                       (assoc
                           time-table
                         category
                         (if-let [total (time-table category)]
                           (+ total hours)
                           hours))]))
                  [#{} {}]
                  (filter #(> (count %) 0)
                          (map #(re-find entry-pattern %)
                               (line-seq (io/reader data-file)))))]
      (doseq [x time-table]
        (println (format "\"%s\",\"%s\""
                         (key x)
                         (val x))))
      (println (count dates) "days"))))

(-run)
  
;; Call $exit when not using nailgun

;; Local Variables:
;; mode: clojure
;; End:
